@page "/register"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using FFCProject.Models
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager

<EditForm Model="@newUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="login-wrapper">
        <div class="login-box">
            <div class="text-center">
                <img src="images/FFC-logo.png" alt="FFC Logo" class="ffc-logo mb-3" />
            </div>

            <h3 class="mb-4 text-white text-center">Register</h3>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger py-1">@ErrorMessage</div>
            }

            <InputText class="form-control" @bind-Value="newUser.FirstName" placeholder="First Name" />
            <ValidationMessage For="@(() => newUser.FirstName)" />

            <InputText class="form-control" @bind-Value="newUser.LastName" placeholder="Last Name" />
            <ValidationMessage For="@(() => newUser.LastName)" />

            <InputText class="form-control" @bind-Value="newUser.Username" placeholder="Username" />
            <ValidationMessage For="@(() => newUser.Username)" />

            <InputText class="form-control" @bind-Value="newUser.Email" placeholder="Email" />
            <ValidationMessage For="@(() => newUser.Email)" />

            <InputText class="form-control" type="password" @bind-Value="newUser.Password" placeholder="Password" />
            <ValidationMessage For="@(() => newUser.Password)" />

            <InputText class="form-control" type="password" @bind-Value="newUser.ConfirmPassword" placeholder="Confirm Password" />
            <ValidationMessage For="@(() => newUser.ConfirmPassword)" />

            <InputText class="form-control" @bind-Value="newUser.Designation" placeholder="Designation" />
            <ValidationMessage For="@(() => newUser.Designation)" />

            <InputText class="form-control" @bind-Value="newUser.ContactNumber" placeholder="Contact Number" />
            <ValidationMessage For="@(() => newUser.ContactNumber)" />

            <InputText class="form-control" @bind-Value="newUser.Address" placeholder="Address" />
            <ValidationMessage For="@(() => newUser.Address)" />

            <InputText class="form-control" @bind-Value="newUser.PostalCode" placeholder="Postal Code" />
            <ValidationMessage For="@(() => newUser.PostalCode)" />

            <InputText class="form-control" @bind-Value="newUser.PermanentAddress" placeholder="Permanent Address" />
            <ValidationMessage For="@(() => newUser.PermanentAddress)" />

            <button type="submit" class="btn-register">Register</button>

            <p class="text-white mt-3 text-center">
                Already have an account? <a href="/login" class="text-white"><u>Login</u></a>
            </p>
        </div>
    </div>
</EditForm>

<style>
    .login-wrapper {
        min-height: 100vh;
        background: linear-gradient(to bottom right, #2c2c2c, #bfa443);
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }

    .login-box {
        width: 100%;
        max-width: 700px;
        max-height: 95vh;
        overflow-y: auto;
        padding: 30px;
        border-radius: 15px;
        backdrop-filter: blur(12px);
        box-shadow: 0 0 25px rgba(0, 255, 255, 0.2);
        color: white;
    }

    .ffc-logo {
        max-width: 150px;
        height: auto;
        margin-bottom: 10px;
    }

    .form-control {
        background-color: rgba(0, 0, 0, 0.7);
        border: 2px solid transparent;
        border-radius: 8px;
        padding: 8px 12px;
        color: white;
        transition: all 0.3s ease;
        width: 100%;
        font-size: 13px;
        height: 36px;
        margin-bottom: 15px;
    }

        .form-control::placeholder {
            color: white;
        }

        .form-control:focus {
            outline: none;
            border-color: #00ffff;
            background-color: rgba(0, 0, 0, 0.8);
            box-shadow: 0 0 6px #00ffff, 0 0 10px #00ffff88;
        }

    .btn-register {
        width: 100%;
        height: 40px;
        background-color: black;
        color: white;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        font-size: 14px;
    }

        .btn-register:hover {
            background-color: navy;
        }
</style>

@code {
    private RegisterViewModel newUser = new();
    private string ErrorMessage;

    private async Task HandleValidSubmit()
    {
        ErrorMessage = "";

        if (newUser.Password != newUser.ConfirmPassword)
        {
            ErrorMessage = "Passwords do not match.";
            return;
        }

        // Create new ApplicationUser from ViewModel
        var user = new ApplicationUser
        {
            UserName = newUser.Username,
            Email = newUser.Email,
            FirstName = newUser.FirstName,
            LastName = newUser.LastName,
            Designation = newUser.Designation,
            ContactNumber = newUser.ContactNumber,
            Address = newUser.Address,
            PostalCode = newUser.PostalCode,
            PermanentAddress = newUser.PermanentAddress
        };

        var result = await UserManager.CreateAsync(user, newUser.Password);

        if (result.Succeeded)
        {
            // Optional: assign role here
            // await UserManager.AddToRoleAsync(user, "Employee");

            Navigation.NavigateTo("/login");
        }
        else
        {
            ErrorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }
}
