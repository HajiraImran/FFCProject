@page "/reset-password/{Email}"
@inject FFCProject.Data.AppDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject NetcodeHub.Packages.Components.Toast.ToastService ToastService
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using NetcodeHub.Packages.Components.Toast
@rendermode InteractiveServer

<Toast @ref="ToastService.ToastComponent" />

<EditForm Model="@model" OnValidSubmit="ResetPasswords" FormName="resetpasswords">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="reset-wrapper d-flex justify-content-center align-items-center">
        <div class="reset-box text-center p-4">
            <h3 class="mb-4 text-white">Reset Password</h3>

            <div class="form-group mb-3">
                <InputText class="form-control hover-effect" @bind-Value="model.OTP" placeholder="Enter OTP" />
            </div>

            <div class="form-group mb-3">
                <InputText class="form-control hover-effect" type="password" @bind-Value="model.NewPassword" placeholder="New Password" />
            </div>

            <div class="form-group mb-3">
                <InputText class="form-control hover-effect" type="password" @bind-Value="model.ConfirmPassword" placeholder="Confirm New Password" />
            </div>

            <button type="submit" class="btn btn-light w-100 mb-3" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span>Resetting...</span>
                }
                else
                {
                    <span>Reset Password</span>
                }
            </button>

            <p class="text-white">
                Back to <a href="/login" class="text-white">Login</a>
            </p>
        </div>
    </div>
</EditForm>

<style>
    .hover-effect {
        transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
    }

        .hover-effect:hover {
            background-color: rgba(255, 255, 255, 0.5) !important;
            color: black !important;
        }

    .reset-wrapper {
        height: 100vh;
        background: linear-gradient(to bottom right, #2c2c2c, #bfa443);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .reset-box {
        width: 370px;
        background: rgba(255, 255, 255, 0.08);
        border-radius: 15px;
        backdrop-filter: blur(10px);
        box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
    }

    .form-control {
        background-color: rgba(255, 255, 255, 0.3);
        border: none;
        color: white;
    }

        .form-control::placeholder {
            color: #eee;
        }

        .form-control:focus {
            background-color: rgba(255, 255, 255, 0.4);
            color: black;
            box-shadow: none;
        }
</style>

@code {
    [Parameter]
    public string Email { get; set; }

    private ResetPasswordModel model = new();
    private bool IsLoading = false;

    protected override void OnInitialized()
    {
        model.Email = Email;
    }

    private async Task ResetPasswords()
    {
        IsLoading = true;
        StateHasChanged();

        if (model.NewPassword != model.ConfirmPassword)
        {
            ToastService.ShowErrorToast("❌ Passwords do not match.", "Reset Failed");
            IsLoading = false;
            return;
        }

        var otpRecord = await DbContext.OtpEntries
            .OrderByDescending(o => o.Id)
            .FirstOrDefaultAsync(o => o.Email == model.Email && o.OTP == model.OTP && o.Expiry > DateTime.Now);

        if (otpRecord == null)
        {
            ToastService.ShowErrorToast("❌ Invalid or expired OTP.", "Reset Failed");
            IsLoading = false;
            return;
        }

        var user = await UserManager.FindByEmailAsync(model.Email);
        if (user == null)
        {
            ToastService.ShowErrorToast("❌ User not found.", "Reset Failed");
            IsLoading = false;
            return;
        }

        // Remove OTP after successful verification
        DbContext.OtpEntries.Remove(otpRecord);
        await DbContext.SaveChangesAsync();

        var resetToken = await UserManager.GeneratePasswordResetTokenAsync(user);
        var resetResult = await UserManager.ResetPasswordAsync(user, resetToken, model.NewPassword);

        if (resetResult.Succeeded)
        {
            ToastService.ShowSuccessToast("✅ Password reset successful.", "Success");
            IsLoading = false;
            Navigation.NavigateTo("/login");
        }
        else
        {
            foreach (var error in resetResult.Errors)
            {
                ToastService.ShowErrorToast($"❌ {error.Description}", "Reset Failed");
            }
            IsLoading = false;
        }
    }

    public class ResetPasswordModel
    {
        public string Email { get; set; }
        public string OTP { get; set; }
        public string NewPassword { get; set; }
        public string ConfirmPassword { get; set; }
    }
}
